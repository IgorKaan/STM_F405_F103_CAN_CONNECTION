
HAL CAN 405 API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000187c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a04  08001a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001a14  08001a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000c0  200000c0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000064b5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000012fa  00000000  00000000  000264f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001cfa  00000000  00000000  000277eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004d0  00000000  00000000  000294e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000498  00000000  00000000  000299b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002263  00000000  00000000  00029e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001e0b  00000000  00000000  0002c0b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0002debe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000af4  00000000  00000000  0002df3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080019ec 	.word	0x080019ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080019ec 	.word	0x080019ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
 80004da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
 80004de:	7818      	ldrb	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80004e8:	4a0c      	ldr	r2, [pc, #48]	; (800051c <HAL_InitTick+0x44>)
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 fc56 	bl	8000da0 <HAL_SYSTICK_Config>
 80004f4:	b968      	cbnz	r0, 8000512 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f6:	2c0f      	cmp	r4, #15
 80004f8:	d901      	bls.n	80004fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004fa:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80004fc:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fe:	2200      	movs	r2, #0
 8000500:	4621      	mov	r1, r4
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	f000 fc0d 	bl	8000d24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_InitTick+0x48>)
 800050c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_Init>:
{
 8000524:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x30>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 fbdd 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ffc6 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 800054c:	f001 f926 	bl	800179c <HAL_MspInit>
}
 8000550:	2000      	movs	r0, #0
 8000552:	bd08      	pop	{r3, pc}
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <HAL_IncTick+0x10>)
 800055a:	6811      	ldr	r1, [r2, #0]
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <HAL_IncTick+0x14>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	440b      	add	r3, r1
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <HAL_GetTick+0x8>)
 8000572:	6818      	ldr	r0, [r3, #0]
}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000028 	.word	0x20000028

0800057c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800057c:	b538      	push	{r3, r4, r5, lr}
 800057e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000580:	f7ff fff6 	bl	8000570 <HAL_GetTick>
 8000584:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	f1b4 3fff 	cmp.w	r4, #4294967295
 800058a:	d002      	beq.n	8000592 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_Delay+0x24>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000592:	f7ff ffed 	bl	8000570 <HAL_GetTick>
 8000596:	1b40      	subs	r0, r0, r5
 8000598:	4284      	cmp	r4, r0
 800059a:	d8fa      	bhi.n	8000592 <HAL_Delay+0x16>
  {
  }
}
 800059c:	bd38      	pop	{r3, r4, r5, pc}
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000

080005a4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005a4:	2800      	cmp	r0, #0
 80005a6:	f000 808a 	beq.w	80006be <HAL_CAN_Init+0x11a>
{
 80005aa:	b538      	push	{r3, r4, r5, lr}
 80005ac:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 80005b2:	b1d3      	cbz	r3, 80005ea <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005b4:	6822      	ldr	r2, [r4, #0]
 80005b6:	6813      	ldr	r3, [r2, #0]
 80005b8:	f023 0302 	bic.w	r3, r3, #2
 80005bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005be:	f7ff ffd7 	bl	8000570 <HAL_GetTick>
 80005c2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	f012 0f02 	tst.w	r2, #2
 80005cc:	d010      	beq.n	80005f0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005ce:	f7ff ffcf 	bl	8000570 <HAL_GetTick>
 80005d2:	1b40      	subs	r0, r0, r5
 80005d4:	280a      	cmp	r0, #10
 80005d6:	d9f5      	bls.n	80005c4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005de:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005e0:	2305      	movs	r3, #5
 80005e2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80005e6:	2001      	movs	r0, #1
 80005e8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80005ea:	f001 f8f3 	bl	80017d4 <HAL_CAN_MspInit>
 80005ee:	e7e1      	b.n	80005b4 <HAL_CAN_Init+0x10>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	f042 0201 	orr.w	r2, r2, #1
 80005f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005f8:	f7ff ffba 	bl	8000570 <HAL_GetTick>
 80005fc:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005fe:	6823      	ldr	r3, [r4, #0]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	f012 0f01 	tst.w	r2, #1
 8000606:	d10d      	bne.n	8000624 <HAL_CAN_Init+0x80>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000608:	f7ff ffb2 	bl	8000570 <HAL_GetTick>
 800060c:	1b40      	subs	r0, r0, r5
 800060e:	280a      	cmp	r0, #10
 8000610:	d9f5      	bls.n	80005fe <HAL_CAN_Init+0x5a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800061a:	2305      	movs	r3, #5
 800061c:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
 8000622:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000624:	7e22      	ldrb	r2, [r4, #24]
 8000626:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	bf0c      	ite	eq
 800062c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000630:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000636:	7e63      	ldrb	r3, [r4, #25]
 8000638:	2b01      	cmp	r3, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800063a:	6822      	ldr	r2, [r4, #0]
 800063c:	6813      	ldr	r3, [r2, #0]
 800063e:	bf0c      	ite	eq
 8000640:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000644:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800064a:	7ea3      	ldrb	r3, [r4, #26]
 800064c:	2b01      	cmp	r3, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800064e:	6822      	ldr	r2, [r4, #0]
 8000650:	6813      	ldr	r3, [r2, #0]
 8000652:	bf0c      	ite	eq
 8000654:	f043 0320 	orreq.w	r3, r3, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000658:	f023 0320 	bicne.w	r3, r3, #32
 800065c:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800065e:	7ee3      	ldrb	r3, [r4, #27]
 8000660:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000662:	6822      	ldr	r2, [r4, #0]
 8000664:	6813      	ldr	r3, [r2, #0]
 8000666:	bf0c      	ite	eq
 8000668:	f023 0310 	biceq.w	r3, r3, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800066c:	f043 0310 	orrne.w	r3, r3, #16
 8000670:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000672:	7f23      	ldrb	r3, [r4, #28]
 8000674:	2b01      	cmp	r3, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000676:	6822      	ldr	r2, [r4, #0]
 8000678:	6813      	ldr	r3, [r2, #0]
 800067a:	bf0c      	ite	eq
 800067c:	f043 0308 	orreq.w	r3, r3, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000680:	f023 0308 	bicne.w	r3, r3, #8
 8000684:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000686:	7f63      	ldrb	r3, [r4, #29]
 8000688:	2b01      	cmp	r3, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800068a:	6822      	ldr	r2, [r4, #0]
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	bf0c      	ite	eq
 8000690:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000694:	f023 0304 	bicne.w	r3, r3, #4
 8000698:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800069a:	6821      	ldr	r1, [r4, #0]
 800069c:	68a3      	ldr	r3, [r4, #8]
 800069e:	68e2      	ldr	r2, [r4, #12]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	6922      	ldr	r2, [r4, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	6962      	ldr	r2, [r4, #20]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	6862      	ldr	r2, [r4, #4]
 80006ac:	3a01      	subs	r2, #1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006b2:	2000      	movs	r0, #0
 80006b4:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80006b6:	2301      	movs	r3, #1
 80006b8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80006bc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006be:	2001      	movs	r0, #1
 80006c0:	4770      	bx	lr
	...

080006c4 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80006c4:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d905      	bls.n	80006dc <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80006d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
 80006da:	4770      	bx	lr
{
 80006dc:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80006de:	4b43      	ldr	r3, [pc, #268]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 80006e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006e4:	f042 0201 	orr.w	r2, r2, #1
 80006e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80006ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006f0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80006f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80006f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006fc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80006fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000702:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000706:	694a      	ldr	r2, [r1, #20]
 8000708:	f002 021f 	and.w	r2, r2, #31
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000712:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8000716:	43d0      	mvns	r0, r2
 8000718:	4004      	ands	r4, r0
 800071a:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800071e:	69cb      	ldr	r3, [r1, #28]
 8000720:	b9b3      	cbnz	r3, 8000750 <HAL_CAN_ConfigFilter+0x8c>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 8000724:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8000728:	4004      	ands	r4, r0
 800072a:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800072e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000730:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000732:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000734:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000738:	3448      	adds	r4, #72	; 0x48
 800073a:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800073e:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000740:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000742:	880c      	ldrh	r4, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000744:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000748:	3548      	adds	r5, #72	; 0x48
 800074a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800074e:	605c      	str	r4, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000750:	69cb      	ldr	r3, [r1, #28]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d01d      	beq.n	8000792 <HAL_CAN_ConfigFilter+0xce>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000756:	698b      	ldr	r3, [r1, #24]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d132      	bne.n	80007c2 <HAL_CAN_ConfigFilter+0xfe>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800075c:	4c23      	ldr	r4, [pc, #140]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 800075e:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8000762:	4003      	ands	r3, r0
 8000764:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000768:	690b      	ldr	r3, [r1, #16]
 800076a:	bb8b      	cbnz	r3, 80007d0 <HAL_CAN_ConfigFilter+0x10c>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 800076e:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8000772:	4020      	ands	r0, r4
 8000774:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000778:	6a0b      	ldr	r3, [r1, #32]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d02f      	beq.n	80007de <HAL_CAN_ConfigFilter+0x11a>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 8000780:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 800078c:	2000      	movs	r0, #0
  }
}
 800078e:	bc70      	pop	{r4, r5, r6}
 8000790:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 8000794:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8000798:	4314      	orrs	r4, r2
 800079a:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800079e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80007a0:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80007a2:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80007a4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80007a8:	3448      	adds	r4, #72	; 0x48
 80007aa:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80007ae:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80007b0:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80007b2:	898c      	ldrh	r4, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80007b4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80007b8:	3548      	adds	r5, #72	; 0x48
 80007ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80007be:	605c      	str	r4, [r3, #4]
 80007c0:	e7c9      	b.n	8000756 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80007c2:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 80007c4:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80007c8:	4313      	orrs	r3, r2
 80007ca:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 80007ce:	e7cb      	b.n	8000768 <HAL_CAN_ConfigFilter+0xa4>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 80007d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80007d6:	4313      	orrs	r3, r2
 80007d8:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 80007dc:	e7cc      	b.n	8000778 <HAL_CAN_ConfigFilter+0xb4>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80007de:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_CAN_ConfigFilter+0x128>)
 80007e0:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80007e4:	430a      	orrs	r2, r1
 80007e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80007ea:	e7c8      	b.n	800077e <HAL_CAN_ConfigFilter+0xba>
 80007ec:	40006400 	.word	0x40006400

080007f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80007f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80007f2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d005      	beq.n	8000808 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80007fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000802:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000804:	2001      	movs	r0, #1
  }
}
 8000806:	bd38      	pop	{r3, r4, r5, pc}
 8000808:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 800080a:	2302      	movs	r3, #2
 800080c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000810:	6802      	ldr	r2, [r0, #0]
 8000812:	6813      	ldr	r3, [r2, #0]
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800081a:	f7ff fea9 	bl	8000570 <HAL_GetTick>
 800081e:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f013 0f01 	tst.w	r3, #1
 8000828:	d00d      	beq.n	8000846 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800082a:	f7ff fea1 	bl	8000570 <HAL_GetTick>
 800082e:	1b40      	subs	r0, r0, r5
 8000830:	280a      	cmp	r0, #10
 8000832:	d9f5      	bls.n	8000820 <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800083c:	2305      	movs	r3, #5
 800083e:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000846:	2000      	movs	r0, #0
 8000848:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 800084a:	bd38      	pop	{r3, r4, r5, pc}

0800084c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800084c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800084e:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000852:	6805      	ldr	r5, [r0, #0]
 8000854:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000856:	3c01      	subs	r4, #1
 8000858:	b2e4      	uxtb	r4, r4
 800085a:	2c01      	cmp	r4, #1
 800085c:	d906      	bls.n	800086c <HAL_CAN_AddTxMessage+0x20>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800085e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000864:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000866:	2001      	movs	r0, #1
  }
}
 8000868:	bcf0      	pop	{r4, r5, r6, r7}
 800086a:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800086c:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 8000870:	d05e      	beq.n	8000930 <HAL_CAN_AddTxMessage+0xe4>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000872:	f3c5 6501 	ubfx	r5, r5, #24, #2
      if (transmitmailbox > 2U)
 8000876:	2d02      	cmp	r5, #2
 8000878:	d83f      	bhi.n	80008fa <HAL_CAN_AddTxMessage+0xae>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800087a:	2401      	movs	r4, #1
 800087c:	40ac      	lsls	r4, r5
 800087e:	601c      	str	r4, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000880:	688b      	ldr	r3, [r1, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d13f      	bne.n	8000906 <HAL_CAN_AddTxMessage+0xba>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000886:	6804      	ldr	r4, [r0, #0]
 8000888:	680e      	ldr	r6, [r1, #0]
 800088a:	68cb      	ldr	r3, [r1, #12]
 800088c:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 8000890:	f105 0318 	add.w	r3, r5, #24
 8000894:	011b      	lsls	r3, r3, #4
 8000896:	50e6      	str	r6, [r4, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000898:	6803      	ldr	r3, [r0, #0]
 800089a:	690c      	ldr	r4, [r1, #16]
 800089c:	f105 0618 	add.w	r6, r5, #24
 80008a0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80008a4:	605c      	str	r4, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80008a6:	7d0b      	ldrb	r3, [r1, #20]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d037      	beq.n	800091c <HAL_CAN_AddTxMessage+0xd0>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80008ac:	6801      	ldr	r1, [r0, #0]
 80008ae:	79d4      	ldrb	r4, [r2, #7]
 80008b0:	7993      	ldrb	r3, [r2, #6]
 80008b2:	041b      	lsls	r3, r3, #16
 80008b4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80008b8:	7914      	ldrb	r4, [r2, #4]
 80008ba:	4323      	orrs	r3, r4
 80008bc:	7954      	ldrb	r4, [r2, #5]
 80008be:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80008c2:	012d      	lsls	r5, r5, #4
 80008c4:	4429      	add	r1, r5
 80008c6:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80008ca:	6801      	ldr	r1, [r0, #0]
 80008cc:	78d4      	ldrb	r4, [r2, #3]
 80008ce:	7893      	ldrb	r3, [r2, #2]
 80008d0:	041b      	lsls	r3, r3, #16
 80008d2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80008d6:	7814      	ldrb	r4, [r2, #0]
 80008d8:	4323      	orrs	r3, r4
 80008da:	7852      	ldrb	r2, [r2, #1]
 80008dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008e0:	4429      	add	r1, r5
 80008e2:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
 80008e6:	6803      	ldr	r3, [r0, #0]
 80008e8:	441d      	add	r5, r3
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008ea:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
      return HAL_OK;
 80008f6:	2000      	movs	r0, #0
 80008f8:	e7b6      	b.n	8000868 <HAL_CAN_AddTxMessage+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80008fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000900:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000902:	2001      	movs	r0, #1
 8000904:	e7b0      	b.n	8000868 <HAL_CAN_AddTxMessage+0x1c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000906:	6804      	ldr	r4, [r0, #0]
 8000908:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 800090a:	68cf      	ldr	r7, [r1, #12]
 800090c:	433b      	orrs	r3, r7
 800090e:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000912:	f105 0618 	add.w	r6, r5, #24
 8000916:	0136      	lsls	r6, r6, #4
 8000918:	51a3      	str	r3, [r4, r6]
 800091a:	e7bd      	b.n	8000898 <HAL_CAN_AddTxMessage+0x4c>
 800091c:	6803      	ldr	r3, [r0, #0]
 800091e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000922:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8000926:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800092a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 800092e:	e7bd      	b.n	80008ac <HAL_CAN_AddTxMessage+0x60>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000930:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000936:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
 800093a:	e795      	b.n	8000868 <HAL_CAN_AddTxMessage+0x1c>

0800093c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800093c:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 800093e:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000942:	3c01      	subs	r4, #1
 8000944:	b2e4      	uxtb	r4, r4
 8000946:	2c01      	cmp	r4, #1
 8000948:	d906      	bls.n	8000958 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800094a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800094c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000950:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
  }
}
 8000954:	bc30      	pop	{r4, r5}
 8000956:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000958:	2900      	cmp	r1, #0
 800095a:	d16b      	bne.n	8000a34 <HAL_CAN_GetRxMessage+0xf8>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800095c:	6804      	ldr	r4, [r0, #0]
 800095e:	68e4      	ldr	r4, [r4, #12]
 8000960:	f014 0f03 	tst.w	r4, #3
 8000964:	d060      	beq.n	8000a28 <HAL_CAN_GetRxMessage+0xec>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000966:	6805      	ldr	r5, [r0, #0]
 8000968:	f101 041b 	add.w	r4, r1, #27
 800096c:	0124      	lsls	r4, r4, #4
 800096e:	592c      	ldr	r4, [r5, r4]
 8000970:	f004 0404 	and.w	r4, r4, #4
 8000974:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000976:	2c00      	cmp	r4, #0
 8000978:	d167      	bne.n	8000a4a <HAL_CAN_GetRxMessage+0x10e>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800097a:	6805      	ldr	r5, [r0, #0]
 800097c:	f101 041b 	add.w	r4, r1, #27
 8000980:	0124      	lsls	r4, r4, #4
 8000982:	592c      	ldr	r4, [r5, r4]
 8000984:	0d64      	lsrs	r4, r4, #21
 8000986:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000988:	6805      	ldr	r5, [r0, #0]
 800098a:	f101 041b 	add.w	r4, r1, #27
 800098e:	0124      	lsls	r4, r4, #4
 8000990:	592d      	ldr	r5, [r5, r4]
 8000992:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8000996:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000998:	6805      	ldr	r5, [r0, #0]
 800099a:	4425      	add	r5, r4
 800099c:	686d      	ldr	r5, [r5, #4]
 800099e:	f005 050f 	and.w	r5, r5, #15
 80009a2:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80009a4:	6805      	ldr	r5, [r0, #0]
 80009a6:	4425      	add	r5, r4
 80009a8:	686d      	ldr	r5, [r5, #4]
 80009aa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80009ae:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80009b0:	6805      	ldr	r5, [r0, #0]
 80009b2:	442c      	add	r4, r5
 80009b4:	6864      	ldr	r4, [r4, #4]
 80009b6:	0c24      	lsrs	r4, r4, #16
 80009b8:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80009ba:	6804      	ldr	r4, [r0, #0]
 80009bc:	010a      	lsls	r2, r1, #4
 80009be:	4414      	add	r4, r2
 80009c0:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80009c4:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80009c6:	6804      	ldr	r4, [r0, #0]
 80009c8:	4414      	add	r4, r2
 80009ca:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80009ce:	0a24      	lsrs	r4, r4, #8
 80009d0:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80009d2:	6804      	ldr	r4, [r0, #0]
 80009d4:	4414      	add	r4, r2
 80009d6:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80009da:	0c24      	lsrs	r4, r4, #16
 80009dc:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80009de:	6804      	ldr	r4, [r0, #0]
 80009e0:	4414      	add	r4, r2
 80009e2:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80009e6:	0e24      	lsrs	r4, r4, #24
 80009e8:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80009ea:	6804      	ldr	r4, [r0, #0]
 80009ec:	4414      	add	r4, r2
 80009ee:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80009f2:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80009f4:	6804      	ldr	r4, [r0, #0]
 80009f6:	4414      	add	r4, r2
 80009f8:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80009fc:	0a24      	lsrs	r4, r4, #8
 80009fe:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a00:	6804      	ldr	r4, [r0, #0]
 8000a02:	4414      	add	r4, r2
 8000a04:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000a08:	0c24      	lsrs	r4, r4, #16
 8000a0a:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a0c:	6804      	ldr	r4, [r0, #0]
 8000a0e:	4422      	add	r2, r4
 8000a10:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a14:	0e12      	lsrs	r2, r2, #24
 8000a16:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a18:	b9f9      	cbnz	r1, 8000a5a <HAL_CAN_GetRxMessage+0x11e>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a1a:	6802      	ldr	r2, [r0, #0]
 8000a1c:	68d3      	ldr	r3, [r2, #12]
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8000a24:	2000      	movs	r0, #0
 8000a26:	e795      	b.n	8000954 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000a30:	2001      	movs	r0, #1
 8000a32:	e78f      	b.n	8000954 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a34:	6804      	ldr	r4, [r0, #0]
 8000a36:	6924      	ldr	r4, [r4, #16]
 8000a38:	f014 0f03 	tst.w	r4, #3
 8000a3c:	d193      	bne.n	8000966 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a44:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000a46:	2001      	movs	r0, #1
 8000a48:	e784      	b.n	8000954 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000a4a:	6805      	ldr	r5, [r0, #0]
 8000a4c:	f101 041b 	add.w	r4, r1, #27
 8000a50:	0124      	lsls	r4, r4, #4
 8000a52:	592c      	ldr	r4, [r5, r4]
 8000a54:	08e4      	lsrs	r4, r4, #3
 8000a56:	6054      	str	r4, [r2, #4]
 8000a58:	e796      	b.n	8000988 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a5a:	6802      	ldr	r2, [r0, #0]
 8000a5c:	6913      	ldr	r3, [r2, #16]
 8000a5e:	f043 0320 	orr.w	r3, r3, #32
 8000a62:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8000a64:	2000      	movs	r0, #0
 8000a66:	e775      	b.n	8000954 <HAL_CAN_GetRxMessage+0x18>

08000a68 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a68:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d905      	bls.n	8000a80 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a7a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000a7c:	2001      	movs	r0, #1
  }
}
 8000a7e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000a80:	6802      	ldr	r2, [r0, #0]
 8000a82:	6953      	ldr	r3, [r2, #20]
 8000a84:	4319      	orrs	r1, r3
 8000a86:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000a88:	2000      	movs	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a8c:	4770      	bx	lr

08000a8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a8e:	4770      	bx	lr

08000a90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a90:	4770      	bx	lr

08000a92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000a92:	4770      	bx	lr

08000a94 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000a94:	4770      	bx	lr

08000a96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000a96:	4770      	bx	lr

08000a98 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a98:	4770      	bx	lr

08000a9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000a9a:	4770      	bx	lr

08000a9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a9c:	4770      	bx	lr

08000a9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000aa0:	4770      	bx	lr

08000aa2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000aa4:	4770      	bx	lr

08000aa6 <HAL_CAN_IRQHandler>:
{
 8000aa6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aaa:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000aac:	6803      	ldr	r3, [r0, #0]
 8000aae:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ab0:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ab2:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ab4:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ab8:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000abc:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ac0:	f014 0f01 	tst.w	r4, #1
 8000ac4:	d05a      	beq.n	8000b7c <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ac6:	f016 0f01 	tst.w	r6, #1
 8000aca:	d017      	beq.n	8000afc <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000acc:	2201      	movs	r2, #1
 8000ace:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ad0:	f016 0f02 	tst.w	r6, #2
 8000ad4:	d108      	bne.n	8000ae8 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000ad6:	f016 0f04 	tst.w	r6, #4
 8000ada:	d130      	bne.n	8000b3e <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000adc:	f016 0f08 	tst.w	r6, #8
 8000ae0:	d007      	beq.n	8000af2 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000ae2:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8000ae6:	e00b      	b.n	8000b00 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ae8:	f7ff ffd0 	bl	8000a8c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000aec:	f04f 0b00 	mov.w	fp, #0
 8000af0:	e006      	b.n	8000b00 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000af2:	f7ff ffce 	bl	8000a92 <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000af6:	f04f 0b00 	mov.w	fp, #0
 8000afa:	e001      	b.n	8000b00 <HAL_CAN_IRQHandler+0x5a>
 8000afc:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b00:	f416 7f80 	tst.w	r6, #256	; 0x100
 8000b04:	d00b      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b06:	682b      	ldr	r3, [r5, #0]
 8000b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b0e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8000b12:	d117      	bne.n	8000b44 <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b14:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8000b18:	d018      	beq.n	8000b4c <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b1a:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b1e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000b22:	d02d      	beq.n	8000b80 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b2c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000b30:	d116      	bne.n	8000b60 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b32:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8000b36:	d017      	beq.n	8000b68 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b38:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8000b3c:	e020      	b.n	8000b80 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b3e:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8000b42:	e7dd      	b.n	8000b00 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b44:	4628      	mov	r0, r5
 8000b46:	f7ff ffa2 	bl	8000a8e <HAL_CAN_TxMailbox1CompleteCallback>
 8000b4a:	e7e8      	b.n	8000b1e <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b4c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8000b50:	d002      	beq.n	8000b58 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b52:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 8000b56:	e7e2      	b.n	8000b1e <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f7ff ff9b 	bl	8000a94 <HAL_CAN_TxMailbox1AbortCallback>
 8000b5e:	e7de      	b.n	8000b1e <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b60:	4628      	mov	r0, r5
 8000b62:	f7ff ff95 	bl	8000a90 <HAL_CAN_TxMailbox2CompleteCallback>
 8000b66:	e00b      	b.n	8000b80 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b68:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8000b6c:	d002      	beq.n	8000b74 <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b6e:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 8000b72:	e005      	b.n	8000b80 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b74:	4628      	mov	r0, r5
 8000b76:	f7ff ff8e 	bl	8000a96 <HAL_CAN_TxMailbox2AbortCallback>
 8000b7a:	e001      	b.n	8000b80 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b7c:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000b80:	f014 0f08 	tst.w	r4, #8
 8000b84:	d007      	beq.n	8000b96 <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000b86:	f019 0f10 	tst.w	r9, #16
 8000b8a:	d004      	beq.n	8000b96 <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000b8c:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	2210      	movs	r2, #16
 8000b94:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000b96:	f014 0f04 	tst.w	r4, #4
 8000b9a:	d002      	beq.n	8000ba2 <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000b9c:	f019 0f08 	tst.w	r9, #8
 8000ba0:	d160      	bne.n	8000c64 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000ba2:	f014 0f02 	tst.w	r4, #2
 8000ba6:	d004      	beq.n	8000bb2 <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f013 0f03 	tst.w	r3, #3
 8000bb0:	d15f      	bne.n	8000c72 <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000bb2:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000bb6:	d007      	beq.n	8000bc8 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000bb8:	f018 0f10 	tst.w	r8, #16
 8000bbc:	d004      	beq.n	8000bc8 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000bbe:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000bc8:	f014 0f20 	tst.w	r4, #32
 8000bcc:	d002      	beq.n	8000bd4 <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000bce:	f018 0f08 	tst.w	r8, #8
 8000bd2:	d152      	bne.n	8000c7a <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000bd4:	f014 0f10 	tst.w	r4, #16
 8000bd8:	d004      	beq.n	8000be4 <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	f013 0f03 	tst.w	r3, #3
 8000be2:	d151      	bne.n	8000c88 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000be4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000be8:	d002      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000bea:	f017 0f10 	tst.w	r7, #16
 8000bee:	d14f      	bne.n	8000c90 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000bf0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000bf4:	d002      	beq.n	8000bfc <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000bf6:	f017 0f08 	tst.w	r7, #8
 8000bfa:	d150      	bne.n	8000c9e <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000bfc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000c00:	d067      	beq.n	8000cd2 <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000c02:	f017 0f04 	tst.w	r7, #4
 8000c06:	d061      	beq.n	8000ccc <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000c08:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000c0c:	d004      	beq.n	8000c18 <HAL_CAN_IRQHandler+0x172>
 8000c0e:	f01a 0f01 	tst.w	sl, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000c12:	bf18      	it	ne
 8000c14:	f04b 0b01 	orrne.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c18:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000c1c:	d004      	beq.n	8000c28 <HAL_CAN_IRQHandler+0x182>
 8000c1e:	f01a 0f02 	tst.w	sl, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000c22:	bf18      	it	ne
 8000c24:	f04b 0b02 	orrne.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c28:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000c2c:	d004      	beq.n	8000c38 <HAL_CAN_IRQHandler+0x192>
 8000c2e:	f01a 0f04 	tst.w	sl, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000c32:	bf18      	it	ne
 8000c34:	f04b 0b04 	orrne.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000c38:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000c3c:	d046      	beq.n	8000ccc <HAL_CAN_IRQHandler+0x226>
 8000c3e:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8000c42:	d043      	beq.n	8000ccc <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 8000c44:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000c48:	d048      	beq.n	8000cdc <HAL_CAN_IRQHandler+0x236>
 8000c4a:	d92f      	bls.n	8000cac <HAL_CAN_IRQHandler+0x206>
 8000c4c:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8000c50:	d047      	beq.n	8000ce2 <HAL_CAN_IRQHandler+0x23c>
 8000c52:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000c56:	d047      	beq.n	8000ce8 <HAL_CAN_IRQHandler+0x242>
 8000c58:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8000c5c:	d131      	bne.n	8000cc2 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c5e:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 8000c62:	e02e      	b.n	8000cc2 <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	2208      	movs	r2, #8
 8000c68:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f7ff ff15 	bl	8000a9a <HAL_CAN_RxFifo0FullCallback>
 8000c70:	e797      	b.n	8000ba2 <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c72:	4628      	mov	r0, r5
 8000c74:	f7ff ff10 	bl	8000a98 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000c78:	e79b      	b.n	8000bb2 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c7a:	682b      	ldr	r3, [r5, #0]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c80:	4628      	mov	r0, r5
 8000c82:	f7ff ff0c 	bl	8000a9e <HAL_CAN_RxFifo1FullCallback>
 8000c86:	e7a5      	b.n	8000bd4 <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f7ff ff07 	bl	8000a9c <HAL_CAN_RxFifo1MsgPendingCallback>
 8000c8e:	e7a9      	b.n	8000be4 <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	2210      	movs	r2, #16
 8000c94:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000c96:	4628      	mov	r0, r5
 8000c98:	f7ff ff02 	bl	8000aa0 <HAL_CAN_SleepCallback>
 8000c9c:	e7a8      	b.n	8000bf0 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f7ff fefc 	bl	8000aa2 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000caa:	e7a7      	b.n	8000bfc <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8000cac:	f1ba 0f10 	cmp.w	sl, #16
 8000cb0:	d005      	beq.n	8000cbe <HAL_CAN_IRQHandler+0x218>
 8000cb2:	f1ba 0f20 	cmp.w	sl, #32
 8000cb6:	d104      	bne.n	8000cc2 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000cb8:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8000cbc:	e001      	b.n	8000cc2 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000cbe:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000cc2:	682a      	ldr	r2, [r5, #0]
 8000cc4:	6993      	ldr	r3, [r2, #24]
 8000cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cca:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	2204      	movs	r2, #4
 8000cd0:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000cd2:	f1bb 0f00 	cmp.w	fp, #0
 8000cd6:	d10a      	bne.n	8000cee <HAL_CAN_IRQHandler+0x248>
 8000cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8000cdc:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8000ce0:	e7ef      	b.n	8000cc2 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 8000ce2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8000ce6:	e7ec      	b.n	8000cc2 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ce8:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8000cec:	e7e9      	b.n	8000cc2 <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8000cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000cf0:	ea4b 0303 	orr.w	r3, fp, r3
 8000cf4:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000cf6:	4628      	mov	r0, r5
 8000cf8:	f7ff fed4 	bl	8000aa4 <HAL_CAN_ErrorCallback>
}
 8000cfc:	e7ec      	b.n	8000cd8 <HAL_CAN_IRQHandler+0x232>
	...

08000d00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d02:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	0c1b      	lsrs	r3, r3, #16
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	0200      	lsls	r0, r0, #8
 8000d16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d1a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d1c:	60d3      	str	r3, [r2, #12]
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d24:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_NVIC_SetPriority+0x58>)
 8000d28:	68dc      	ldr	r4, [r3, #12]
 8000d2a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2e:	f1c4 0307 	rsb	r3, r4, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d38:	1d25      	adds	r5, r4, #4
 8000d3a:	2d06      	cmp	r5, #6
 8000d3c:	bf8c      	ite	hi
 8000d3e:	1ee5      	subhi	r5, r4, #3
 8000d40:	2500      	movls	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d42:	2401      	movs	r4, #1
 8000d44:	fa04 f303 	lsl.w	r3, r4, r3
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	4019      	ands	r1, r3
 8000d4c:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4e:	40ac      	lsls	r4, r5
 8000d50:	3c01      	subs	r4, #1
 8000d52:	4022      	ands	r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d56:	2800      	cmp	r0, #0
 8000d58:	db09      	blt.n	8000d6e <HAL_NVIC_SetPriority+0x4a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	0109      	lsls	r1, r1, #4
 8000d5c:	b2c9      	uxtb	r1, r1
 8000d5e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d62:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d66:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d6a:	bc30      	pop	{r4, r5}
 8000d6c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	f000 000f 	and.w	r0, r0, #15
 8000d72:	0109      	lsls	r1, r1, #4
 8000d74:	b2c9      	uxtb	r1, r1
 8000d76:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_NVIC_SetPriority+0x5c>)
 8000d78:	5419      	strb	r1, [r3, r0]
 8000d7a:	e7f6      	b.n	8000d6a <HAL_NVIC_SetPriority+0x46>
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	e000ed14 	.word	0xe000ed14

08000d84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d84:	2800      	cmp	r0, #0
 8000d86:	db08      	blt.n	8000d9a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d88:	0942      	lsrs	r2, r0, #5
 8000d8a:	f000 001f 	and.w	r0, r0, #31
 8000d8e:	2301      	movs	r3, #1
 8000d90:	fa03 f000 	lsl.w	r0, r3, r0
 8000d94:	4b01      	ldr	r3, [pc, #4]	; (8000d9c <HAL_NVIC_EnableIRQ+0x18>)
 8000d96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	3801      	subs	r0, #1
 8000da2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000da6:	d20a      	bcs.n	8000dbe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_SYSTICK_Config+0x24>)
 8000daa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	21f0      	movs	r1, #240	; 0xf0
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_SYSTICK_Config+0x28>)
 8000db0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	2000      	movs	r0, #0
 8000db6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4f69      	ldr	r7, [pc, #420]	; (8000f7c <HAL_GPIO_Init+0x1b0>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd6:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8000f88 <HAL_GPIO_Init+0x1bc>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dda:	4e69      	ldr	r6, [pc, #420]	; (8000f80 <HAL_GPIO_Init+0x1b4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ddc:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000f8c <HAL_GPIO_Init+0x1c0>
 8000de0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8000f90 <HAL_GPIO_Init+0x1c4>
 8000de4:	e056      	b.n	8000e94 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->AFR[position >> 3U];
 8000de6:	08ec      	lsrs	r4, r5, #3
 8000de8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8000dec:	f8d4 c020 	ldr.w	ip, [r4, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df0:	f005 0207 	and.w	r2, r5, #7
 8000df4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f20b 	lsl.w	r2, r2, fp
 8000dfe:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e02:	690a      	ldr	r2, [r1, #16]
 8000e04:	fa02 f20b 	lsl.w	r2, r2, fp
 8000e08:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e0c:	6222      	str	r2, [r4, #32]
 8000e0e:	e04d      	b.n	8000eac <HAL_GPIO_Init+0xe0>
        temp = GPIOx->OSPEEDR; 
 8000e10:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e12:	ea02 0b04 	and.w	fp, r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e16:	68cc      	ldr	r4, [r1, #12]
 8000e18:	fa04 f40c 	lsl.w	r4, r4, ip
 8000e1c:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8000e20:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e22:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	ea24 0b03 	bic.w	fp, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e28:	684c      	ldr	r4, [r1, #4]
 8000e2a:	f3c4 1300 	ubfx	r3, r4, #4, #1
 8000e2e:	40ab      	lsls	r3, r5
 8000e30:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->OTYPER = temp;
 8000e34:	6043      	str	r3, [r0, #4]
 8000e36:	e050      	b.n	8000eda <HAL_GPIO_Init+0x10e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e38:	2200      	movs	r2, #0
 8000e3a:	fa02 f20c 	lsl.w	r2, r2, ip
 8000e3e:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e40:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR;
 8000e42:	6833      	ldr	r3, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e44:	ea6f 0408 	mvn.w	r4, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e48:	684a      	ldr	r2, [r1, #4]
 8000e4a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	bf0c      	ite	eq
 8000e50:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8000e52:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR = temp;
 8000e56:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 8000e58:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5a:	684a      	ldr	r2, [r1, #4]
 8000e5c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e60:	bf0c      	ite	eq
 8000e62:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8000e64:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR = temp;
 8000e68:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6c:	684b      	ldr	r3, [r1, #4]
 8000e6e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e72:	bf0c      	ite	eq
 8000e74:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8000e76:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR = temp;
 8000e7a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8000e7c:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7e:	684a      	ldr	r2, [r1, #4]
 8000e80:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000e84:	bf0c      	ite	eq
 8000e86:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8000e88:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR = temp;
 8000e8c:	60f3      	str	r3, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	3501      	adds	r5, #1
 8000e90:	2d10      	cmp	r5, #16
 8000e92:	d070      	beq.n	8000f76 <HAL_GPIO_Init+0x1aa>
    ioposition = 0x01U << position;
 8000e94:	2301      	movs	r3, #1
 8000e96:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e98:	680a      	ldr	r2, [r1, #0]
 8000e9a:	ea03 0802 	and.w	r8, r3, r2
    if(iocurrent == ioposition)
 8000e9e:	4543      	cmp	r3, r8
 8000ea0:	d1f5      	bne.n	8000e8e <HAL_GPIO_Init+0xc2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea2:	684a      	ldr	r2, [r1, #4]
 8000ea4:	f022 0210 	bic.w	r2, r2, #16
 8000ea8:	2a02      	cmp	r2, #2
 8000eaa:	d09c      	beq.n	8000de6 <HAL_GPIO_Init+0x1a>
      temp = GPIOx->MODER;
 8000eac:	6804      	ldr	r4, [r0, #0]
 8000eae:	ea4f 0c45 	mov.w	ip, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f20c 	lsl.w	r2, r2, ip
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	ea04 0b02 	and.w	fp, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebe:	684c      	ldr	r4, [r1, #4]
 8000ec0:	f004 0403 	and.w	r4, r4, #3
 8000ec4:	fa04 f40c 	lsl.w	r4, r4, ip
 8000ec8:	ea44 040b 	orr.w	r4, r4, fp
      GPIOx->MODER = temp;
 8000ecc:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ece:	684c      	ldr	r4, [r1, #4]
 8000ed0:	f024 0410 	bic.w	r4, r4, #16
 8000ed4:	3c01      	subs	r4, #1
 8000ed6:	2c01      	cmp	r4, #1
 8000ed8:	d99a      	bls.n	8000e10 <HAL_GPIO_Init+0x44>
      temp = GPIOx->PUPDR;
 8000eda:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000edc:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ede:	688b      	ldr	r3, [r1, #8]
 8000ee0:	fa03 f30c 	lsl.w	r3, r3, ip
 8000ee4:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8000ee6:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee8:	684b      	ldr	r3, [r1, #4]
 8000eea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000eee:	d0ce      	beq.n	8000e8e <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efa:	647b      	str	r3, [r7, #68]	; 0x44
 8000efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	f025 0303 	bic.w	r3, r5, #3
 8000f0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f0e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	689c      	ldr	r4, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	f005 0203 	and.w	r2, r5, #3
 8000f18:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f20c 	lsl.w	r2, r2, ip
 8000f22:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f26:	4570      	cmp	r0, lr
 8000f28:	d086      	beq.n	8000e38 <HAL_GPIO_Init+0x6c>
 8000f2a:	4548      	cmp	r0, r9
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0x192>
 8000f2e:	4550      	cmp	r0, sl
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0x196>
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <HAL_GPIO_Init+0x1b8>)
 8000f34:	4290      	cmp	r0, r2
 8000f36:	d016      	beq.n	8000f66 <HAL_GPIO_Init+0x19a>
 8000f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d014      	beq.n	8000f6a <HAL_GPIO_Init+0x19e>
 8000f40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f44:	4290      	cmp	r0, r2
 8000f46:	d012      	beq.n	8000f6e <HAL_GPIO_Init+0x1a2>
 8000f48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f4c:	4290      	cmp	r0, r2
 8000f4e:	d010      	beq.n	8000f72 <HAL_GPIO_Init+0x1a6>
 8000f50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f54:	4290      	cmp	r0, r2
 8000f56:	bf0c      	ite	eq
 8000f58:	2207      	moveq	r2, #7
 8000f5a:	2208      	movne	r2, #8
 8000f5c:	e76d      	b.n	8000e3a <HAL_GPIO_Init+0x6e>
 8000f5e:	2201      	movs	r2, #1
 8000f60:	e76b      	b.n	8000e3a <HAL_GPIO_Init+0x6e>
 8000f62:	2202      	movs	r2, #2
 8000f64:	e769      	b.n	8000e3a <HAL_GPIO_Init+0x6e>
 8000f66:	2203      	movs	r2, #3
 8000f68:	e767      	b.n	8000e3a <HAL_GPIO_Init+0x6e>
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	e765      	b.n	8000e3a <HAL_GPIO_Init+0x6e>
 8000f6e:	2205      	movs	r2, #5
 8000f70:	e763      	b.n	8000e3a <HAL_GPIO_Init+0x6e>
 8000f72:	2206      	movs	r2, #6
 8000f74:	e761      	b.n	8000e3a <HAL_GPIO_Init+0x6e>
      }
    }
  }
}
 8000f76:	b003      	add	sp, #12
 8000f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013c00 	.word	0x40013c00
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800

08000f94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f94:	6903      	ldr	r3, [r0, #16]
 8000f96:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000f98:	bf14      	ite	ne
 8000f9a:	2001      	movne	r0, #1
 8000f9c:	2000      	moveq	r0, #0
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	b912      	cbnz	r2, 8000fa8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	6181      	str	r1, [r0, #24]
 8000fa6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000fa8:	6181      	str	r1, [r0, #24]
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000fac:	6943      	ldr	r3, [r0, #20]
 8000fae:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fb2:	bf08      	it	eq
 8000fb4:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	6181      	str	r1, [r0, #24]
 8000fb8:	4770      	bx	lr

08000fba <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fba:	4770      	bx	lr

08000fbc <HAL_GPIO_EXTI_IRQHandler>:
{
 8000fbc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4203      	tst	r3, r0
 8000fc4:	d100      	bne.n	8000fc8 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000fc6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fc8:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000fca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fcc:	f7ff fff5 	bl	8000fba <HAL_GPIO_EXTI_Callback>
}
 8000fd0:	e7f9      	b.n	8000fc6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000fd2:	bf00      	nop
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f000 81bd 	beq.w	8001358 <HAL_RCC_OscConfig+0x380>
{
 8000fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe6:	6803      	ldr	r3, [r0, #0]
 8000fe8:	f013 0f01 	tst.w	r3, #1
 8000fec:	d03b      	beq.n	8001066 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fee:	4ba8      	ldr	r3, [pc, #672]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d02c      	beq.n	8001054 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ffa:	4ba5      	ldr	r3, [pc, #660]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001002:	2b08      	cmp	r3, #8
 8001004:	d021      	beq.n	800104a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001006:	6863      	ldr	r3, [r4, #4]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d04f      	beq.n	80010ae <HAL_RCC_OscConfig+0xd6>
 800100e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001012:	d052      	beq.n	80010ba <HAL_RCC_OscConfig+0xe2>
 8001014:	4b9e      	ldr	r3, [pc, #632]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001024:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001026:	6863      	ldr	r3, [r4, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d050      	beq.n	80010ce <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff faa0 	bl	8000570 <HAL_GetTick>
 8001030:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4d97      	ldr	r5, [pc, #604]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800103a:	d114      	bne.n	8001066 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fa98 	bl	8000570 <HAL_GetTick>
 8001040:	1b80      	subs	r0, r0, r6
 8001042:	2864      	cmp	r0, #100	; 0x64
 8001044:	d9f6      	bls.n	8001034 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8001046:	2003      	movs	r0, #3
 8001048:	e18b      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104a:	4b91      	ldr	r3, [pc, #580]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001052:	d0d8      	beq.n	8001006 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	4b8e      	ldr	r3, [pc, #568]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800105c:	d003      	beq.n	8001066 <HAL_RCC_OscConfig+0x8e>
 800105e:	6863      	ldr	r3, [r4, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 817b 	beq.w	800135c <HAL_RCC_OscConfig+0x384>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	f013 0f02 	tst.w	r3, #2
 800106c:	d055      	beq.n	800111a <HAL_RCC_OscConfig+0x142>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800106e:	4b88      	ldr	r3, [pc, #544]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f013 0f0c 	tst.w	r3, #12
 8001076:	d03e      	beq.n	80010f6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001078:	4b85      	ldr	r3, [pc, #532]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001080:	2b08      	cmp	r3, #8
 8001082:	d033      	beq.n	80010ec <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001084:	68e3      	ldr	r3, [r4, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d068      	beq.n	800115c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108a:	2201      	movs	r2, #1
 800108c:	4b81      	ldr	r3, [pc, #516]	; (8001294 <HAL_RCC_OscConfig+0x2bc>)
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff fa6e 	bl	8000570 <HAL_GetTick>
 8001094:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	4d7e      	ldr	r5, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	f013 0f02 	tst.w	r3, #2
 800109e:	d154      	bne.n	800114a <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fa66 	bl	8000570 <HAL_GetTick>
 80010a4:	1b80      	subs	r0, r0, r6
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d9f6      	bls.n	8001098 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80010aa:	2003      	movs	r0, #3
 80010ac:	e159      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	4a78      	ldr	r2, [pc, #480]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e7b5      	b.n	8001026 <HAL_RCC_OscConfig+0x4e>
 80010ba:	4b75      	ldr	r3, [pc, #468]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e7ab      	b.n	8001026 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80010ce:	f7ff fa4f 	bl	8000570 <HAL_GetTick>
 80010d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d4:	4d6e      	ldr	r5, [pc, #440]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010dc:	d0c3      	beq.n	8001066 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fa47 	bl	8000570 <HAL_GetTick>
 80010e2:	1b80      	subs	r0, r0, r6
 80010e4:	2864      	cmp	r0, #100	; 0x64
 80010e6:	d9f6      	bls.n	80010d6 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80010e8:	2003      	movs	r0, #3
 80010ea:	e13a      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ec:	4b68      	ldr	r3, [pc, #416]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80010f4:	d1c6      	bne.n	8001084 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b66      	ldr	r3, [pc, #408]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f013 0f02 	tst.w	r3, #2
 80010fe:	d004      	beq.n	800110a <HAL_RCC_OscConfig+0x132>
 8001100:	68e3      	ldr	r3, [r4, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d001      	beq.n	800110a <HAL_RCC_OscConfig+0x132>
        return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
 8001108:	e12b      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4a61      	ldr	r2, [pc, #388]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800110c:	6813      	ldr	r3, [r2, #0]
 800110e:	6921      	ldr	r1, [r4, #16]
 8001110:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001114:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001118:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	f013 0f08 	tst.w	r3, #8
 8001120:	d040      	beq.n	80011a4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001122:	6963      	ldr	r3, [r4, #20]
 8001124:	b363      	cbz	r3, 8001180 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	2201      	movs	r2, #1
 8001128:	4b5b      	ldr	r3, [pc, #364]	; (8001298 <HAL_RCC_OscConfig+0x2c0>)
 800112a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112c:	f7ff fa20 	bl	8000570 <HAL_GetTick>
 8001130:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4d57      	ldr	r5, [pc, #348]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001134:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001136:	f013 0f02 	tst.w	r3, #2
 800113a:	d133      	bne.n	80011a4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fa18 	bl	8000570 <HAL_GetTick>
 8001140:	1b80      	subs	r0, r0, r6
 8001142:	2802      	cmp	r0, #2
 8001144:	d9f6      	bls.n	8001134 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8001146:	2003      	movs	r0, #3
 8001148:	e10b      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4a51      	ldr	r2, [pc, #324]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	6921      	ldr	r1, [r4, #16]
 8001150:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001154:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e7de      	b.n	800111a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 800115c:	2200      	movs	r2, #0
 800115e:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <HAL_RCC_OscConfig+0x2bc>)
 8001160:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001162:	f7ff fa05 	bl	8000570 <HAL_GetTick>
 8001166:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001168:	4d49      	ldr	r5, [pc, #292]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	f013 0f02 	tst.w	r3, #2
 8001170:	d0d3      	beq.n	800111a <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff f9fd 	bl	8000570 <HAL_GetTick>
 8001176:	1b80      	subs	r0, r0, r6
 8001178:	2802      	cmp	r0, #2
 800117a:	d9f6      	bls.n	800116a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800117c:	2003      	movs	r0, #3
 800117e:	e0f0      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001180:	2200      	movs	r2, #0
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <HAL_RCC_OscConfig+0x2c0>)
 8001184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff f9f3 	bl	8000570 <HAL_GetTick>
 800118a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4d40      	ldr	r5, [pc, #256]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800118e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001190:	f013 0f02 	tst.w	r3, #2
 8001194:	d006      	beq.n	80011a4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff f9eb 	bl	8000570 <HAL_GetTick>
 800119a:	1b80      	subs	r0, r0, r6
 800119c:	2802      	cmp	r0, #2
 800119e:	d9f6      	bls.n	800118e <HAL_RCC_OscConfig+0x1b6>
        {
          return HAL_TIMEOUT;
 80011a0:	2003      	movs	r0, #3
 80011a2:	e0de      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	f013 0f04 	tst.w	r3, #4
 80011aa:	d07a      	beq.n	80012a2 <HAL_RCC_OscConfig+0x2ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011b4:	d134      	bne.n	8001220 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80011bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011ce:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_RCC_OscConfig+0x2c4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011d8:	d024      	beq.n	8001224 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011da:	68a3      	ldr	r3, [r4, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d035      	beq.n	800124c <HAL_RCC_OscConfig+0x274>
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d039      	beq.n	8001258 <HAL_RCC_OscConfig+0x280>
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 80011e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	671a      	str	r2, [r3, #112]	; 0x70
 80011ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011f0:	f022 0204 	bic.w	r2, r2, #4
 80011f4:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011f6:	68a3      	ldr	r3, [r4, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d037      	beq.n	800126c <HAL_RCC_OscConfig+0x294>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fc:	f7ff f9b8 	bl	8000570 <HAL_GetTick>
 8001200:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001202:	4e23      	ldr	r6, [pc, #140]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001204:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800120a:	f013 0f02 	tst.w	r3, #2
 800120e:	d147      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001210:	f7ff f9ae 	bl	8000570 <HAL_GetTick>
 8001214:	eba0 0008 	sub.w	r0, r0, r8
 8001218:	42b8      	cmp	r0, r7
 800121a:	d9f5      	bls.n	8001208 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800121c:	2003      	movs	r0, #3
 800121e:	e0a0      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
    FlagStatus       pwrclkchanged = RESET;
 8001220:	2500      	movs	r5, #0
 8001222:	e7d5      	b.n	80011d0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001224:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_RCC_OscConfig+0x2c4>)
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800122e:	f7ff f99f 	bl	8000570 <HAL_GetTick>
 8001232:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	4e19      	ldr	r6, [pc, #100]	; (800129c <HAL_RCC_OscConfig+0x2c4>)
 8001236:	6833      	ldr	r3, [r6, #0]
 8001238:	f413 7f80 	tst.w	r3, #256	; 0x100
 800123c:	d1cd      	bne.n	80011da <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123e:	f7ff f997 	bl	8000570 <HAL_GetTick>
 8001242:	1bc0      	subs	r0, r0, r7
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8001248:	2003      	movs	r0, #3
 800124a:	e08a      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800124e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6713      	str	r3, [r2, #112]	; 0x70
 8001256:	e7ce      	b.n	80011f6 <HAL_RCC_OscConfig+0x21e>
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 800125a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800125c:	f042 0204 	orr.w	r2, r2, #4
 8001260:	671a      	str	r2, [r3, #112]	; 0x70
 8001262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001264:	f042 0201 	orr.w	r2, r2, #1
 8001268:	671a      	str	r2, [r3, #112]	; 0x70
 800126a:	e7c4      	b.n	80011f6 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff f980 	bl	8000570 <HAL_GetTick>
 8001270:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001272:	4e07      	ldr	r6, [pc, #28]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001278:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800127a:	f013 0f02 	tst.w	r3, #2
 800127e:	d00f      	beq.n	80012a0 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7ff f976 	bl	8000570 <HAL_GetTick>
 8001284:	eba0 0008 	sub.w	r0, r0, r8
 8001288:	42b8      	cmp	r0, r7
 800128a:	d9f5      	bls.n	8001278 <HAL_RCC_OscConfig+0x2a0>
        {
          return HAL_TIMEOUT;
 800128c:	2003      	movs	r0, #3
 800128e:	e068      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
 8001290:	40023800 	.word	0x40023800
 8001294:	42470000 	.word	0x42470000
 8001298:	42470e80 	.word	0x42470e80
 800129c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a0:	b9e5      	cbnz	r5, 80012dc <HAL_RCC_OscConfig+0x304>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a2:	69a3      	ldr	r3, [r4, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d05b      	beq.n	8001360 <HAL_RCC_OscConfig+0x388>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012a8:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_RCC_OscConfig+0x394>)
 80012aa:	6892      	ldr	r2, [r2, #8]
 80012ac:	f002 020c 	and.w	r2, r2, #12
 80012b0:	2a08      	cmp	r2, #8
 80012b2:	d059      	beq.n	8001368 <HAL_RCC_OscConfig+0x390>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d017      	beq.n	80012e8 <HAL_RCC_OscConfig+0x310>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b8:	2200      	movs	r2, #0
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_RCC_OscConfig+0x398>)
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff f957 	bl	8000570 <HAL_GetTick>
 80012c2:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c4:	4c29      	ldr	r4, [pc, #164]	; (800136c <HAL_RCC_OscConfig+0x394>)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012cc:	d042      	beq.n	8001354 <HAL_RCC_OscConfig+0x37c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff f94f 	bl	8000570 <HAL_GetTick>
 80012d2:	1b40      	subs	r0, r0, r5
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9f6      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2ee>
          {
            return HAL_TIMEOUT;
 80012d8:	2003      	movs	r0, #3
 80012da:	e042      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012dc:	4a23      	ldr	r2, [pc, #140]	; (800136c <HAL_RCC_OscConfig+0x394>)
 80012de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	e7dc      	b.n	80012a2 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 80012e8:	2200      	movs	r2, #0
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_RCC_OscConfig+0x398>)
 80012ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ee:	f7ff f93f 	bl	8000570 <HAL_GetTick>
 80012f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f4:	4d1d      	ldr	r5, [pc, #116]	; (800136c <HAL_RCC_OscConfig+0x394>)
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012fc:	d006      	beq.n	800130c <HAL_RCC_OscConfig+0x334>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff f937 	bl	8000570 <HAL_GetTick>
 8001302:	1b80      	subs	r0, r0, r6
 8001304:	2802      	cmp	r0, #2
 8001306:	d9f6      	bls.n	80012f6 <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 8001308:	2003      	movs	r0, #3
 800130a:	e02a      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800130c:	69e3      	ldr	r3, [r4, #28]
 800130e:	6a22      	ldr	r2, [r4, #32]
 8001310:	4313      	orrs	r3, r2
 8001312:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001314:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001318:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800131a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800131e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001320:	0852      	lsrs	r2, r2, #1
 8001322:	3a01      	subs	r2, #1
 8001324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001328:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_RCC_OscConfig+0x394>)
 800132a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800132c:	2201      	movs	r2, #1
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_RCC_OscConfig+0x398>)
 8001330:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001332:	f7ff f91d 	bl	8000570 <HAL_GetTick>
 8001336:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001338:	4c0c      	ldr	r4, [pc, #48]	; (800136c <HAL_RCC_OscConfig+0x394>)
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x378>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff f915 	bl	8000570 <HAL_GetTick>
 8001346:	1b40      	subs	r0, r0, r5
 8001348:	2802      	cmp	r0, #2
 800134a:	d9f6      	bls.n	800133a <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 800134c:	2003      	movs	r0, #3
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001350:	2000      	movs	r0, #0
 8001352:	e006      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
 8001354:	2000      	movs	r0, #0
 8001356:	e004      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
    return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
 800135a:	4770      	bx	lr
        return HAL_ERROR;
 800135c:	2001      	movs	r0, #1
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
  return HAL_OK;
 8001360:	2000      	movs	r0, #0
}
 8001362:	b002      	add	sp, #8
 8001364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
 800136a:	e7fa      	b.n	8001362 <HAL_RCC_OscConfig+0x38a>
 800136c:	40023800 	.word	0x40023800
 8001370:	42470060 	.word	0x42470060

08001374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d003      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x16>
 8001382:	2b08      	cmp	r3, #8
 8001384:	d003      	beq.n	800138e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001386:	482e      	ldr	r0, [pc, #184]	; (8001440 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sysclockfreq = HSE_VALUE;
 800138a:	482e      	ldr	r0, [pc, #184]	; (8001444 <HAL_RCC_GetSysClockFreq+0xd0>)
 800138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800139c:	d02a      	beq.n	80013f4 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <HAL_RCC_GetSysClockFreq+0xc8>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80013a6:	461e      	mov	r6, r3
 80013a8:	2700      	movs	r7, #0
 80013aa:	015c      	lsls	r4, r3, #5
 80013ac:	2500      	movs	r5, #0
 80013ae:	1ae4      	subs	r4, r4, r3
 80013b0:	eb65 0507 	sbc.w	r5, r5, r7
 80013b4:	01a9      	lsls	r1, r5, #6
 80013b6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80013ba:	01a0      	lsls	r0, r4, #6
 80013bc:	1b00      	subs	r0, r0, r4
 80013be:	eb61 0105 	sbc.w	r1, r1, r5
 80013c2:	00cb      	lsls	r3, r1, #3
 80013c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013c8:	00c4      	lsls	r4, r0, #3
 80013ca:	19a0      	adds	r0, r4, r6
 80013cc:	eb43 0107 	adc.w	r1, r3, r7
 80013d0:	024b      	lsls	r3, r1, #9
 80013d2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80013d6:	0244      	lsls	r4, r0, #9
 80013d8:	4620      	mov	r0, r4
 80013da:	4619      	mov	r1, r3
 80013dc:	2300      	movs	r3, #0
 80013de:	f7fe fef3 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_RCC_GetSysClockFreq+0xc8>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013ea:	3301      	adds	r3, #1
 80013ec:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80013f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_RCC_GetSysClockFreq+0xc8>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80013fc:	461e      	mov	r6, r3
 80013fe:	2700      	movs	r7, #0
 8001400:	015c      	lsls	r4, r3, #5
 8001402:	2500      	movs	r5, #0
 8001404:	1ae4      	subs	r4, r4, r3
 8001406:	eb65 0507 	sbc.w	r5, r5, r7
 800140a:	01a9      	lsls	r1, r5, #6
 800140c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001410:	01a0      	lsls	r0, r4, #6
 8001412:	1b00      	subs	r0, r0, r4
 8001414:	eb61 0105 	sbc.w	r1, r1, r5
 8001418:	00cb      	lsls	r3, r1, #3
 800141a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800141e:	00c4      	lsls	r4, r0, #3
 8001420:	19a0      	adds	r0, r4, r6
 8001422:	eb43 0107 	adc.w	r1, r3, r7
 8001426:	028b      	lsls	r3, r1, #10
 8001428:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800142c:	0284      	lsls	r4, r0, #10
 800142e:	4620      	mov	r0, r4
 8001430:	4619      	mov	r1, r3
 8001432:	2300      	movs	r3, #0
 8001434:	f7fe fec8 	bl	80001c8 <__aeabi_uldivmod>
 8001438:	e7d3      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x6e>
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	00f42400 	.word	0x00f42400
 8001444:	007a1200 	.word	0x007a1200

08001448 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001448:	2800      	cmp	r0, #0
 800144a:	f000 80a5 	beq.w	8001598 <HAL_RCC_ClockConfig+0x150>
{
 800144e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001452:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_RCC_ClockConfig+0x15c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	428b      	cmp	r3, r1
 800145e:	d20a      	bcs.n	8001476 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001460:	b2cb      	uxtb	r3, r1
 8001462:	4a50      	ldr	r2, [pc, #320]	; (80015a4 <HAL_RCC_ClockConfig+0x15c>)
 8001464:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	4299      	cmp	r1, r3
 800146e:	d002      	beq.n	8001476 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
 8001472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	f013 0f02 	tst.w	r3, #2
 800147c:	d017      	beq.n	80014ae <HAL_RCC_ClockConfig+0x66>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147e:	f013 0f04 	tst.w	r3, #4
 8001482:	d004      	beq.n	800148e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4a48      	ldr	r2, [pc, #288]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 8001486:	6893      	ldr	r3, [r2, #8]
 8001488:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800148c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	f013 0f08 	tst.w	r3, #8
 8001494:	d004      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001496:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 8001498:	6893      	ldr	r3, [r2, #8]
 800149a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800149e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a0:	4a41      	ldr	r2, [pc, #260]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 80014a2:	6893      	ldr	r3, [r2, #8]
 80014a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014a8:	68a0      	ldr	r0, [r4, #8]
 80014aa:	4303      	orrs	r3, r0
 80014ac:	6093      	str	r3, [r2, #8]
 80014ae:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f013 0f01 	tst.w	r3, #1
 80014b6:	d036      	beq.n	8001526 <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b8:	6862      	ldr	r2, [r4, #4]
 80014ba:	2a01      	cmp	r2, #1
 80014bc:	d023      	beq.n	8001506 <HAL_RCC_ClockConfig+0xbe>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014be:	1e93      	subs	r3, r2, #2
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d928      	bls.n	8001516 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f013 0f02 	tst.w	r3, #2
 80014cc:	d066      	beq.n	800159c <HAL_RCC_ClockConfig+0x154>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ce:	4936      	ldr	r1, [pc, #216]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 80014d0:	688b      	ldr	r3, [r1, #8]
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80014da:	f7ff f849 	bl	8000570 <HAL_GetTick>
 80014de:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e0:	4e31      	ldr	r6, [pc, #196]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e2:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e6:	68b3      	ldr	r3, [r6, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	6862      	ldr	r2, [r4, #4]
 80014ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014f2:	d018      	beq.n	8001526 <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff f83c 	bl	8000570 <HAL_GetTick>
 80014f8:	eba0 0008 	sub.w	r0, r0, r8
 80014fc:	42b8      	cmp	r0, r7
 80014fe:	d9f2      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001500:	2003      	movs	r0, #3
 8001502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800150e:	d1de      	bne.n	80014ce <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
 8001512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800151e:	d1d6      	bne.n	80014ce <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
 8001522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_RCC_ClockConfig+0x15c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	429d      	cmp	r5, r3
 8001530:	d20a      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x100>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	b2ea      	uxtb	r2, r5
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_RCC_ClockConfig+0x15c>)
 8001536:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	429d      	cmp	r5, r3
 8001540:	d002      	beq.n	8001548 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
}
 8001544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	f013 0f04 	tst.w	r3, #4
 800154e:	d006      	beq.n	800155e <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001550:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 8001552:	6893      	ldr	r3, [r2, #8]
 8001554:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001558:	68e1      	ldr	r1, [r4, #12]
 800155a:	430b      	orrs	r3, r1
 800155c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	f013 0f08 	tst.w	r3, #8
 8001564:	d007      	beq.n	8001576 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 8001568:	6893      	ldr	r3, [r2, #8]
 800156a:	6921      	ldr	r1, [r4, #16]
 800156c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001570:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001574:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001576:	f7ff fefd 	bl	8001374 <HAL_RCC_GetSysClockFreq>
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_ClockConfig+0x160>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_RCC_ClockConfig+0x164>)
 8001584:	5cd3      	ldrb	r3, [r2, r3]
 8001586:	40d8      	lsrs	r0, r3
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x168>)
 800158a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800158c:	2000      	movs	r0, #0
 800158e:	f7fe ffa3 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001592:	2000      	movs	r0, #0
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
 800159a:	4770      	bx	lr
        return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
 800159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015a2:	bf00      	nop
 80015a4:	40023c00 	.word	0x40023c00
 80015a8:	40023800 	.word	0x40023800
 80015ac:	08001a04 	.word	0x08001a04
 80015b0:	20000008 	.word	0x20000008

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b530      	push	{r4, r5, lr}
 80015b6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b8:	2230      	movs	r2, #48	; 0x30
 80015ba:	2100      	movs	r1, #0
 80015bc:	a808      	add	r0, sp, #32
 80015be:	f000 fa0d 	bl	80019dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c2:	2400      	movs	r4, #0
 80015c4:	9403      	str	r4, [sp, #12]
 80015c6:	9404      	str	r4, [sp, #16]
 80015c8:	9405      	str	r4, [sp, #20]
 80015ca:	9406      	str	r4, [sp, #24]
 80015cc:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	9401      	str	r4, [sp, #4]
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <SystemClock_Config+0x8c>)
 80015d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	9402      	str	r4, [sp, #8]
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <SystemClock_Config+0x90>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001602:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001604:	2502      	movs	r5, #2
 8001606:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800160e:	2304      	movs	r3, #4
 8001610:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001612:	22a8      	movs	r2, #168	; 0xa8
 8001614:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001616:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001618:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	a808      	add	r0, sp, #32
 800161c:	f7ff fcdc 	bl	8000fd8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001620:	230f      	movs	r3, #15
 8001622:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001624:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001626:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800162c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001634:	2105      	movs	r1, #5
 8001636:	a803      	add	r0, sp, #12
 8001638:	f7ff ff06 	bl	8001448 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800163c:	b015      	add	sp, #84	; 0x54
 800163e:	bd30      	pop	{r4, r5, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000

08001648 <main>:
{
 8001648:	b500      	push	{lr}
 800164a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800164c:	f7fe ff6a 	bl	8000524 <HAL_Init>
  SystemClock_Config();
 8001650:	f7ff ffb0 	bl	80015b4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	2400      	movs	r4, #0
 8001656:	9403      	str	r4, [sp, #12]
 8001658:	9404      	str	r4, [sp, #16]
 800165a:	9405      	str	r4, [sp, #20]
 800165c:	9406      	str	r4, [sp, #24]
 800165e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001660:	9400      	str	r4, [sp, #0]
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <main+0x12c>)
 8001664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
 800166c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001672:	9200      	str	r2, [sp, #0]
 8001674:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	9401      	str	r4, [sp, #4]
 8001678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
 8001680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001682:	f002 0201 	and.w	r2, r2, #1
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	9402      	str	r4, [sp, #8]
 800168c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168e:	f042 0204 	orr.w	r2, r2, #4
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800169e:	4d36      	ldr	r5, [pc, #216]	; (8001778 <main+0x130>)
 80016a0:	4622      	mov	r2, r4
 80016a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a6:	4628      	mov	r0, r5
 80016a8:	f7ff fc7a 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ac:	2601      	movs	r6, #1
 80016ae:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <main+0x134>)
 80016b2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	a903      	add	r1, sp, #12
 80016b8:	4831      	ldr	r0, [pc, #196]	; (8001780 <main+0x138>)
 80016ba:	f7ff fb87 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	a903      	add	r1, sp, #12
 80016cc:	4628      	mov	r0, r5
 80016ce:	f7ff fb7d 	bl	8000dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80016d2:	4622      	mov	r2, r4
 80016d4:	4631      	mov	r1, r6
 80016d6:	2006      	movs	r0, #6
 80016d8:	f7ff fb24 	bl	8000d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016dc:	2006      	movs	r0, #6
 80016de:	f7ff fb51 	bl	8000d84 <HAL_NVIC_EnableIRQ>
  hcan1.Instance = CAN1;
 80016e2:	4d28      	ldr	r5, [pc, #160]	; (8001784 <main+0x13c>)
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <main+0x140>)
 80016e6:	602b      	str	r3, [r5, #0]
  hcan1.Init.Prescaler = 21;
 80016e8:	2315      	movs	r3, #21
 80016ea:	606b      	str	r3, [r5, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016ec:	60ac      	str	r4, [r5, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016ee:	60ec      	str	r4, [r5, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80016f0:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 80016f4:	612b      	str	r3, [r5, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80016f6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80016fa:	616b      	str	r3, [r5, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016fc:	762c      	strb	r4, [r5, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016fe:	766c      	strb	r4, [r5, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001700:	76ac      	strb	r4, [r5, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001702:	76ec      	strb	r4, [r5, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001704:	772c      	strb	r4, [r5, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001706:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001708:	4628      	mov	r0, r5
 800170a:	f7fe ff4b 	bl	80005a4 <HAL_CAN_Init>
  pHeader.DLC = 1;
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <main+0x144>)
 8001710:	611e      	str	r6, [r3, #16]
  pHeader.IDE = CAN_ID_STD;
 8001712:	609c      	str	r4, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 8001714:	60dc      	str	r4, [r3, #12]
  pHeader.StdId = 0x244;
 8001716:	f44f 7211 	mov.w	r2, #580	; 0x244
 800171a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800171c:	491c      	ldr	r1, [pc, #112]	; (8001790 <main+0x148>)
 800171e:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterIdHigh = 0x245<<5;
 8001720:	f644 03a0 	movw	r3, #18592	; 0x48a0
 8001724:	600b      	str	r3, [r1, #0]
  sFilterConfig.FilterIdLow = 0;
 8001726:	604c      	str	r4, [r1, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8001728:	608c      	str	r4, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800172a:	60cc      	str	r4, [r1, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800172c:	61cc      	str	r4, [r1, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800172e:	618e      	str	r6, [r1, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8001730:	620e      	str	r6, [r1, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001732:	4628      	mov	r0, r5
 8001734:	f7fe ffc6 	bl	80006c4 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8001738:	4628      	mov	r0, r5
 800173a:	f7ff f859 	bl	80007f0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800173e:	2102      	movs	r1, #2
 8001740:	4628      	mov	r0, r5
 8001742:	f7ff f991 	bl	8000a68 <HAL_CAN_ActivateNotification>
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);
 8001746:	4e13      	ldr	r6, [pc, #76]	; (8001794 <main+0x14c>)
 8001748:	4d13      	ldr	r5, [pc, #76]	; (8001798 <main+0x150>)
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 800174a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800174e:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);
 8001752:	4633      	mov	r3, r6
 8001754:	462a      	mov	r2, r5
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <main+0x144>)
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <main+0x13c>)
 800175a:	f7ff f877 	bl	800084c <HAL_CAN_AddTxMessage>
	HAL_Delay(2000);
 800175e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001762:	f7fe ff0b 	bl	800057c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8001766:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fc1e 	bl	8000fac <HAL_GPIO_TogglePin>
 8001770:	e7ef      	b.n	8001752 <main+0x10a>
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40020800 	.word	0x40020800
 800177c:	10110000 	.word	0x10110000
 8001780:	40020000 	.word	0x40020000
 8001784:	20000078 	.word	0x20000078
 8001788:	40006400 	.word	0x40006400
 800178c:	200000a4 	.word	0x200000a4
 8001790:	2000002c 	.word	0x2000002c
 8001794:	20000058 	.word	0x20000058
 8001798:	200000a0 	.word	0x200000a0

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2100      	movs	r1, #0
 80017a0:	9100      	str	r1, [sp, #0]
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_MspInit+0x34>)
 80017a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
 80017ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	9101      	str	r1, [sp, #4]
 80017b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	b002      	add	sp, #8
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017d4:	b530      	push	{r4, r5, lr}
 80017d6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	2300      	movs	r3, #0
 80017da:	9303      	str	r3, [sp, #12]
 80017dc:	9304      	str	r3, [sp, #16]
 80017de:	9305      	str	r3, [sp, #20]
 80017e0:	9306      	str	r3, [sp, #24]
 80017e2:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 80017e4:	6802      	ldr	r2, [r0, #0]
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_CAN_MspInit+0x78>)
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017ec:	b009      	add	sp, #36	; 0x24
 80017ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017f0:	2400      	movs	r4, #0
 80017f2:	9401      	str	r4, [sp, #4]
 80017f4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001802:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001806:	9201      	str	r2, [sp, #4]
 8001808:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	9402      	str	r4, [sp, #8]
 800180c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800181e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001822:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2502      	movs	r5, #2
 8001826:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800182c:	2309      	movs	r3, #9
 800182e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	a903      	add	r1, sp, #12
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <HAL_CAN_MspInit+0x7c>)
 8001834:	f7ff faca 	bl	8000dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001838:	4622      	mov	r2, r4
 800183a:	4629      	mov	r1, r5
 800183c:	2014      	movs	r0, #20
 800183e:	f7ff fa71 	bl	8000d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001842:	2014      	movs	r0, #20
 8001844:	f7ff fa9e 	bl	8000d84 <HAL_NVIC_EnableIRQ>
}
 8001848:	e7d0      	b.n	80017ec <HAL_CAN_MspInit+0x18>
 800184a:	bf00      	nop
 800184c:	40006400 	.word	0x40006400
 8001850:	40020000 	.word	0x40020000

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	4770      	bx	lr

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	e7fe      	b.n	800185a <BusFault_Handler>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001866:	f7fe fe77 	bl	8000558 <HAL_IncTick>
 800186a:	bd08      	pop	{r3, pc}

0800186c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800186c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff fba4 	bl	8000fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  //for (int n=0;n<1000000;n++);
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001874:	2101      	movs	r1, #1
 8001876:	480b      	ldr	r0, [pc, #44]	; (80018a4 <EXTI0_IRQHandler+0x38>)
 8001878:	f7ff fb8c 	bl	8000f94 <HAL_GPIO_ReadPin>
 800187c:	b918      	cbnz	r0, 8001886 <EXTI0_IRQHandler+0x1a>
  a++;
  GPIOC->ODR = a<<12;
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
  HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);
  }
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fb9c 	bl	8000fbc <HAL_GPIO_EXTI_IRQHandler>
 8001884:	bd08      	pop	{r3, pc}
  a++;
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <EXTI0_IRQHandler+0x3c>)
 8001888:	7813      	ldrb	r3, [r2, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	7013      	strb	r3, [r2, #0]
  GPIOC->ODR = a<<12;
 8001890:	031b      	lsls	r3, r3, #12
 8001892:	4906      	ldr	r1, [pc, #24]	; (80018ac <EXTI0_IRQHandler+0x40>)
 8001894:	614b      	str	r3, [r1, #20]
  HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <EXTI0_IRQHandler+0x44>)
 8001898:	4906      	ldr	r1, [pc, #24]	; (80018b4 <EXTI0_IRQHandler+0x48>)
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <EXTI0_IRQHandler+0x4c>)
 800189c:	f7fe ffd6 	bl	800084c <HAL_CAN_AddTxMessage>
 80018a0:	e7ed      	b.n	800187e <EXTI0_IRQHandler+0x12>
 80018a2:	bf00      	nop
 80018a4:	40020000 	.word	0x40020000
 80018a8:	200000a0 	.word	0x200000a0
 80018ac:	40020800 	.word	0x40020800
 80018b0:	20000058 	.word	0x20000058
 80018b4:	200000a4 	.word	0x200000a4
 80018b8:	20000078 	.word	0x20000078

080018bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018bc:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018be:	4d09      	ldr	r5, [pc, #36]	; (80018e4 <CAN1_RX0_IRQHandler+0x28>)
 80018c0:	4628      	mov	r0, r5
 80018c2:	f7ff f8f0 	bl	8000aa6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
 80018c6:	4c08      	ldr	r4, [pc, #32]	; (80018e8 <CAN1_RX0_IRQHandler+0x2c>)
 80018c8:	4623      	mov	r3, r4
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <CAN1_RX0_IRQHandler+0x30>)
 80018cc:	2100      	movs	r1, #0
 80018ce:	4628      	mov	r0, r5
 80018d0:	f7ff f834 	bl	800093c <HAL_CAN_GetRxMessage>
  //HAL_CAN_AddTxMessage(&hcan1, &pHeader, &r, &TxMailbox);
  r++;
 80018d4:	7823      	ldrb	r3, [r4, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	7023      	strb	r3, [r4, #0]
  GPIOC->ODR = r<<12;
 80018dc:	031b      	lsls	r3, r3, #12
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <CAN1_RX0_IRQHandler+0x34>)
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	bd38      	pop	{r3, r4, r5, pc}
 80018e4:	20000078 	.word	0x20000078
 80018e8:	20000054 	.word	0x20000054
 80018ec:	2000005c 	.word	0x2000005c
 80018f0:	40020800 	.word	0x40020800

080018f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	490f      	ldr	r1, [pc, #60]	; (8001934 <SystemInit+0x40>)
 80018f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <SystemInit+0x44>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800190c:	2000      	movs	r0, #0
 800190e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001916:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800191a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <SystemInit+0x48>)
 800191e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001926:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001928:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800192a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800192e:	608b      	str	r3, [r1, #8]
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	40023800 	.word	0x40023800
 800193c:	24003010 	.word	0x24003010

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001946:	e003      	b.n	8001950 <LoopCopyDataInit>

08001948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800194a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800194c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800194e:	3104      	adds	r1, #4

08001950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001958:	d3f6      	bcc.n	8001948 <CopyDataInit>
  ldr  r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800195c:	e002      	b.n	8001964 <LoopFillZerobss>

0800195e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800195e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001960:	f842 3b04 	str.w	r3, [r2], #4

08001964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001968:	d3f9      	bcc.n	800195e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800196a:	f7ff ffc3 	bl	80018f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f000 f811 	bl	8001994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fe69 	bl	8001648 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800197c:	08001a24 	.word	0x08001a24
  ldr  r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001984:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001988:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800198c:	200000c0 	.word	0x200000c0

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <__libc_init_array>:
 8001994:	b570      	push	{r4, r5, r6, lr}
 8001996:	4e0d      	ldr	r6, [pc, #52]	; (80019cc <__libc_init_array+0x38>)
 8001998:	4c0d      	ldr	r4, [pc, #52]	; (80019d0 <__libc_init_array+0x3c>)
 800199a:	1ba4      	subs	r4, r4, r6
 800199c:	10a4      	asrs	r4, r4, #2
 800199e:	2500      	movs	r5, #0
 80019a0:	42a5      	cmp	r5, r4
 80019a2:	d109      	bne.n	80019b8 <__libc_init_array+0x24>
 80019a4:	4e0b      	ldr	r6, [pc, #44]	; (80019d4 <__libc_init_array+0x40>)
 80019a6:	4c0c      	ldr	r4, [pc, #48]	; (80019d8 <__libc_init_array+0x44>)
 80019a8:	f000 f820 	bl	80019ec <_init>
 80019ac:	1ba4      	subs	r4, r4, r6
 80019ae:	10a4      	asrs	r4, r4, #2
 80019b0:	2500      	movs	r5, #0
 80019b2:	42a5      	cmp	r5, r4
 80019b4:	d105      	bne.n	80019c2 <__libc_init_array+0x2e>
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
 80019b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019bc:	4798      	blx	r3
 80019be:	3501      	adds	r5, #1
 80019c0:	e7ee      	b.n	80019a0 <__libc_init_array+0xc>
 80019c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019c6:	4798      	blx	r3
 80019c8:	3501      	adds	r5, #1
 80019ca:	e7f2      	b.n	80019b2 <__libc_init_array+0x1e>
 80019cc:	08001a1c 	.word	0x08001a1c
 80019d0:	08001a1c 	.word	0x08001a1c
 80019d4:	08001a1c 	.word	0x08001a1c
 80019d8:	08001a20 	.word	0x08001a20

080019dc <memset>:
 80019dc:	4402      	add	r2, r0
 80019de:	4603      	mov	r3, r0
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d100      	bne.n	80019e6 <memset+0xa>
 80019e4:	4770      	bx	lr
 80019e6:	f803 1b01 	strb.w	r1, [r3], #1
 80019ea:	e7f9      	b.n	80019e0 <memset+0x4>

080019ec <_init>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr

080019f8 <_fini>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	bf00      	nop
 80019fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fe:	bc08      	pop	{r3}
 8001a00:	469e      	mov	lr, r3
 8001a02:	4770      	bx	lr
